import kotlin.reflect.KProperty

//meta: <date>

class IO<A>(val value: A) {
    operator fun getValue(value: Any?, property: KProperty<*>): A = TODO()

    fun <B> flatMap(f: (A) -> IO<B>): IO<B> = f(value)

    companion object  {
        fun <A> fx(f: IO.Companion.() -> A): IO<A> = TODO()

        fun <A> just(a: A): IO<A> = IO(a)
    }
}